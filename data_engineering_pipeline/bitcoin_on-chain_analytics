# Import libraries.
import requests
import pandas as pd
import sqlalchemy as sql

# Insert API key.
API_KEY = '---------'

# Fetch data from below urls.
urls = ['https://api.glassnode.com/v1/metrics/addresses/count',
        'https://api.glassnode.com/v1/metrics/addresses/new_non_zero_count',
        'https://api.glassnode.com/v1/metrics/addresses/active_count',
        'https://api.glassnode.com/v1/metrics/institutions/purpose_etf_flows_sum',
        'https://api.glassnode.com/v1/metrics/transactions/count',
        'https://api.glassnode.com/v1/metrics/transactions/transfers_volume_sum',
        'https://api.glassnode.com/v1/metrics/indicators/stock_to_flow_deflection',
        ]

# All the data will be stored in below variable.
data = []

# Loop through all above urls to get the data.
for url in urls:

    headers = url.split('/')[-1]

    # Make API request.
    response = requests.get(url, params={'a': 'BTC', 'api_key': API_KEY})

    # Convert to pandas dataframe
    df = pd.read_json(response.text, convert_dates=['t'])
    df.set_index('t', inplace = True)
    df.rename(columns={'v':headers}, inplace=True)

    # Appending all data from all the urls.
    data.append(df)

# Creating a dataframe from all the list of results.
new_df = pd.concat(data, axis = 1)

# Rename index column.
new_df.index.names = ['date']

# Raname all other columns.
new_df.columns = ['total_address', 'new_address', 'active_address', 'etf_flows',
                  'transaction_count','transfers_volume_sum', 'stock_to_flow_ratio']

# Adding data extraction timestamp & crypto_id.
new_df.insert(0, 'crypto_id', 1)
new_df.insert(8, 'extraction_timestamp', pd.to_datetime('now').replace(microsecond=0))

# Resetting date as index.
new_df = new_df.reset_index()

# Connect to Postgres DB.
engine = sql.create_engine("postgresql://postgres:----@localhost/CryptoMetric")
conn = engine.connect()
print('Conneted!')

# Load data from DF to DB.
new_df.to_sql("btc_onchain_analytics",con=conn, if_exists='append', index= False)
print("Records are added in btc_onchain_analytics DB")

# Close the connection to Postgres DB.
conn.close()
