# Importing libraries.
import praw
import pandas as pd
import sqlalchemy as sql
from datetime import datetime

# Authenticating reddit credentials.
reddit = praw.Reddit(
    client_id="----",
    client_secret="----",
    password="----",
    user_agent="----",
    username="----",
    check_for_async=False
    )

# List of subreddits.
subreddit = ("cryptocurrency+cryptocurrencies+bitcoin+satoshistreetbets+cryptomoonshots+cryptomarkets+ethtrader+ethereum")

# List of all the subreddit posts will be saved.
posts = []

# List of all the subreddit comments will be saved.
comments = []

# Top 50 posts daily from the subreddit.
submission = reddit.subreddit(subreddit).top('day', limit=50)

# Loop through top 50 daily post in the subreddit.
for post in submission:
    posts.append([post.title, post.score, str(post.subreddit), post.url, post.num_comments,
                      post.selftext, str(post.author), str(datetime.fromtimestamp(post.created))])
    post.comments.replace_more(limit=None)

    # Loop through each comment in the post.
    for comment in post.comments.list():

        # Only comments with comment_score above 25.
        if comment.score > 25:

            # Storing all the comment data.
            comments.append([str(comment.body), comment.score, str(comment.subreddit),
                             str(datetime.fromtimestamp(comment.created_utc))])

# Comverting all the data into dataframe.
comments = pd.DataFrame(comments,columns=['comment_body', 'comment_score', 'subreddit', 'comment_created'])

# Comment_body is set to index.
comments = comments.set_index('comment_body')

# Adding data extraction timestamp.
comments.insert(3, 'extraction_timestamp', pd.to_datetime('now').replace(microsecond=0))

# Resetting date as index.
comments = comments.reset_index()

# Connect to Postgres DB.
engine = sql.create_engine("postgresql://postgres:----@localhost/CryptoSocial")
conn = engine.connect()
print('Conneted!')

# Load data from DF to DB.
comments.to_sql("top_reddit_comments",con=conn, if_exists='append', index=False)
print("Records are added in DB")

# Close the connection to Postgres DB.
conn.close()
